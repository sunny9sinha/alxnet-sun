# -*- coding: utf-8 -*-
"""Image_Classification_get_category.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JN0upKfj_Dg7PQWuL4lGTZJM3ZcQXHnL

# **Loading the pretrained model and loading the parameters which were saved as part of the training.**
"""

import torch
import torch.nn as nn

device = "cuda" if torch.cuda.is_available() else "cpu"
print(device)


def loadModel():

  model = torch.hub.load('pytorch/vision:v0.6.0', 'alexnet', pretrained=True)
  model.classifier[4] = nn.Linear(4096,1024)
  model.classifier[6] = nn.Linear(1024,2)
  model.to(device)

  if (device != 'cuda'):
    model.classifier[4].load_state_dict(torch.load('modelparameters_layer4_cpu'))
    model.classifier[6].load_state_dict(torch.load('modelparameters_layer6_cpu'))
  else:
    model.classifier[4].load_state_dict(torch.load('modelparameters_layer4_Gpu'))
    model.classifier[6].load_state_dict(torch.load('modelparameters_layer6_Gpu'))

  model.eval()
  
  for param in model.parameters():
    param.requires_grad = False

  return model

"""# **Data Transformation**

### **Converting to RGB Format**
"""

from PIL import Image
def convertRGB(img):
  img = img.convert("RGB")
  return img


from torchvision import transforms
import io

def get_image_transformed(img):
  image_transforms = transforms.Compose([
                                 transforms.Resize(256),
                                 transforms.CenterCrop(224),
                                 transforms.ToTensor(),
                                 transforms.Normalize(
                                     mean=[0.485, 0.456, 0.406], 
                                     std=[0.229, 0.224, 0.225]
                                 )])
  image = convertRGB(Image.open(img))
  return image_transforms(image).unsqueeze(0)

"""# **Get Predicted Category**"""

def get_category(image_bytes):
    # transform the image    
    transformed_image = get_image_transformed(img=image_bytes).to(device)
    # use the model to predict the class
    model = loadModel()
    outputs = model.forward(transformed_image)
    _, category = outputs.max(1)
    # return the value
    predicted = str(category.item())
    return 'cat' if predicted == '0' else 'dog'

"""# **Flask Application**"""

from flask import Flask,request,jsonify,render_template

app = Flask(__name__)

@app.route("/")
def home():
  return render_template('Home.html')

@app.route("/predictAPI", methods =['POST'])
def predictAPI():
  file =  io.BytesIO(request.get_data())
  pred_class = get_category(file)
  return jsonify({'class':pred_class})

@app.route("/predict", methods =['POST'])
def predict():
    '''
    For rendering results on HTML GUI
    
    '''
    file = request.files['file']
    
    pred_class = get_category(file)
    return render_template('Home.html',prediction_text='Given picture is of {}'.format(pred_class))

if __name__ == '__main__' :
    app.run()